AccountConfig.cs
--------------------
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace BankingProject
{
    static class AccountConfig
    {
        

        public static AddAccountWindow newAccountWindow = null;
        public static EditAccountWindow editAccountWindow = null;
        public static AccountViewModel VueModel = null;
        public static DepositViewModel depositViewModel = null;
        public static WithdrawViewModel withdrawViewModel = null;
        public static DepositWindow depositWindow = null;
        public static AccountListWindow accountListWindow = null;
        public static WithdrawWindow withdrawWindow = null;
        public static AccountViewWindow accountViewWindow = null;
        public static DashBoardWindow dashBoardWindow = null;
        public static AccountTypeWindow accountTypeWindow = null;
        static AccountConfig()
        {
            VueModel = new AccountViewModel();
            newAccountWindow = new AddAccountWindow();
            editAccountWindow = new EditAccountWindow();
            depositViewModel = new DepositViewModel();
            withdrawViewModel = new WithdrawViewModel();
            depositWindow = new DepositWindow();
            accountListWindow = new AccountListWindow();
            withdrawWindow = new WithdrawWindow();
            accountViewWindow = new AccountViewWindow();
            dashBoardWindow = new DashBoardWindow();
            accountTypeWindow = new AccountTypeWindow();

        }
    }
}


AccountException.cs
--------------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BankingProject
{
    /// <summary>
    /// Represents the userdefined exception class
    /// </summary>
    public class AccountException : Exception
    {
        public AccountException() : base() { }

        public AccountException(string message) : base(message) { }

    }
}

AccountListWindow.xaml
----------------------
﻿<Window x:Class="BankingProject.AccountListWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:BankingProject" mc:Ignorable="d" Title="AccountListWindow" Height="450" Width="800" Closed="Window_Closed" Closing="Window_Closing">
    <Grid MaxWidth="1000" Margin="10 10 10 10">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
        <TextBlock Grid.Row="0" Text="Account Manager"
               FontSize="24"
               FontWeight="bold"
               TextAlignment="center"/>
        <Button Grid.Row="1" Content="Add Account" Width="200" Height="30" Margin="0 10 0 0" HorizontalAlignment="left"
            Background="yellow" Foreground="Black" FontWeight="bold"
            Click="Button_Click"/>
        <DataGrid x:Name="grdAccounts" Grid.Row="2" Margin="0 10 0 0"
               IsReadOnly="True" AreRowDetailsFrozen="True" AutoGenerateColumns="False" SelectedItem="{Binding SelectedAccount, Mode=TwoWay}"
              SelectionMode="Single" ItemsSource="{Binding Accounts}">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Account Number" Binding="{Binding AccNo}"/>
                <DataGridTextColumn Header="Name" Binding="{Binding Name}"/>
                <DataGridTextColumn Header="Balance" Binding="{Binding Balance}"/>
                <DataGridTextColumn Header="Type" Binding="{Binding AccType}"/>
                <DataGridTextColumn Header="Email" Binding="{Binding Email}"/>
                <DataGridTextColumn Header="Phone Number" Binding="{Binding PhoneNumber}"/>
                <DataGridTextColumn Header="Address" Binding="{Binding Address}"/>
                <DataGridTextColumn Header="IsActive" Binding="{Binding IsActive}"/>
                <DataGridTextColumn Header="Interest Percentage" Binding="{Binding InterestPercentage}"/>
                <DataGridTextColumn Header="Transaction Count" Binding="{Binding TransactionCount}"/>
                <DataGridTextColumn Header="Last Transaction Date" Binding="{Binding LastTransactionDate}"/>


            </DataGrid.Columns>
        </DataGrid>

        <StackPanel Grid.Row="3" Orientation="Horizontal" HorizontalAlignment="Right">

            <Button x:Name="btnView" Content="View Account" Width="190" Height="30"
            Background="yellow" Foreground="Black" FontWeight="bold"
            Margin="0 10 10 10" Click="btnView_Click"/>

            <Button Grid.Row="3" Content="Update Account" Width="200" Height="30"
            Margin="0,5,0,5" HorizontalAlignment="Left"
            Background="Yellow" Foreground="Black" FontWeight="bold"
            Click="Button_Click_1"/>

            <!--<Button  Content="Show Account Types" Width="200" Height="30"
            Margin="0,10,0,10"
            Background="Yellow" Foreground="Black" FontWeight="bold"
            Command="{Binding ShowAccountTypeCommand}"/>-->

        </StackPanel>



    </Grid>
</Window>

AccountListWindow.xaml.cs
-------------------------------

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace BankingProject
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class AccountListWindow : Window
    {
        public AccountListWindow()
        {
            InitializeComponent();
            this.DataContext = AccountConfig.VueModel;

        }

        

      

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            AccountConfig.newAccountWindow.Show();
            AddAccountWindow newAccountWindow = (AddAccountWindow)AccountConfig.newAccountWindow;
            AccountConfig.VueModel.NewWindowClose = newAccountWindow.WindowClose;

        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            if (grdAccounts.SelectedIndex == -1) 
            {
                var result = MessageBox.Show(messageBoxText: "Are you sure to update?",
                    caption: "Confirm",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);
                return;
            }
            AccountConfig.editAccountWindow.Show();

            EditAccountWindow newEditWindow = (EditAccountWindow)AccountConfig.editAccountWindow;
            AccountConfig.VueModel.EditWindowClose = newEditWindow.WindowClose;

        }

        private void Window_Closed(object sender, EventArgs e)
        {
            Application.Current.Shutdown();
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }

        private void btnView_Click(object sender, RoutedEventArgs e)
        {

            if (grdAccounts.SelectedIndex == -1)
            {
                var result = MessageBox.Show(messageBoxText: "Please select an account",
                    caption: "Alert",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);
                return;
            }
            AccountConfig.accountViewWindow.Show();
        }
    }
}


AccountMemoryRepo.cs
------------------------
﻿using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;
using System.Windows;


namespace BankingProject
{
    /// <summary>
    /// Represents a repository for managing accounts in memory.
    /// </summary>
    public class AccountMemoryRepo : IAccountRepo
    {
        /// <summary>
        /// Gets the instance of the AccountMemoryRepo class.
        /// </summary>
        private static AccountMemoryRepo _instance;


        private ObservableCollection<AccountModel> accounts;

        /// <summary>
        /// Initializes a new instance of the AccountMemoryRepo class.
        /// </summary>

        private AccountMemoryRepo()
        {
            accounts = new ObservableCollection<AccountModel>();
            InitializeAccounts();

        }
        /// <summary>
        /// Initializes the accounts collection with default accounts.
        /// </summary>

        private void InitializeAccounts()
        {
            accounts.Add(new AccountModel

            {
                AccNo = 123,
                Name = "Dinoy",
                Balance = 0,
                AccType = "savings",
                Email = "dinoy@gmail.com",
                PhoneNumber = "5236526526",
                Address = "mulakkampilly",
                IsActive = true,
                InterestPercentage = "0",
                TransactionCount = 0,
                LastTransactionDate = DateTime.Now,


            });
            accounts.Add(new AccountModel
            {
                AccNo = 124,
                Name = "Davis",
                Balance = 0,
                AccType = "current",
                Email = "davis@gmail.com",
                PhoneNumber = "5236526526",
                Address = "tharayil",
                IsActive = true,
                InterestPercentage = "0",
                TransactionCount = 0,
                LastTransactionDate = DateTime.Now,
            });
        }

        /// <summary>
        /// Creates an object for the AccountMemoryRepo class
        /// </summary>

        public static AccountMemoryRepo Instance 
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new AccountMemoryRepo();
                }
                return _instance;
            }
        }

        /// <summary>
        /// Creates a new account in the repository.
        /// </summary>
        /// <param name="account">The account to create.</param>
        /// <exception cref="AccountException">Thrown if an error occurs while creating the account.</exception>
        public void Create(AccountModel account)
        {
            try
            {
                accounts.Add(account);
            }
            catch (AccountException ae)
            {
                throw new AccountException("Error in creating account");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Updates an existing account in the repository.
        /// </summary>
        /// <param name="account">The account to update.</param>
        /// <exception cref="AccountException">Thrown if the account does not exist.</exception>
        public void UpdateAccount(AccountModel account)
        {
            try
            {
                var existingAccount = accounts.FirstOrDefault(a => a.AccNo == account.AccNo);
                if (existingAccount != null)
                {
                    existingAccount.Address = account.Address;
                }
                else
                {
                    throw new AccountException("Account doesn't exists");
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Retrieves all accounts from the repository.
        /// </summary>
        /// <returns>A collection of all accounts in the repository.</returns>
        /// <exception cref="AccountException">Thrown if an error occurs while reading accounts.</exception>
        public ObservableCollection<AccountModel> ReadAllAccount()
        {
            try
            {
                return accounts;
            }
            catch (AccountException ae)
            {
                throw new AccountException("Error reading accounts");
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        /// <summary>
        /// Deletes an account from the repository.
        /// </summary>
        /// <param name="acNo">The account number of the account to delete.</param>
        /// <param name="account">The account to delete.</param>
        public void DeleteAccount(int acNo, AccountModel account)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Deposits a specified amount into an account.
        /// </summary>
        /// <param name="acNo">The account number of the account to deposit into.</param>
        /// <param name="Amount">The amount to deposit.</param>
        /// <exception cref="AccountException">Thrown if the account does not exist</exception>

        public void Deposit(int acNo, int Amount)
        {

            try
            {
                var account = accounts.FirstOrDefault(a => a.AccNo == acNo);
                if (account != null)
                {
                    account.Balance = account.Balance + Amount;
                    account.LastTransactionDate = DateTime.Now;
                    account.TransactionCount = account.TransactionCount + 1;

                }
                else
                {
                    throw new AccountException("Account Not Found , Please input valid account number");
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        /// <summary>
        /// Withdraws a specified amount from an account.
        /// </summary>
        /// <param name="acNo">The account number of the account to withdraw from.</param>
        /// <param name="Amount">The amount to withdraw.</param>
        /// <exception cref="AccountException">Thrown if the account does not exist or if the balance is insufficient.</exception>

        public void Withdrw(int acNo, int Amount)
        {
            try
            {
                var account = accounts.FirstOrDefault(a => a.AccNo == acNo);
                if (account != null)
                {
                    if (account.Balance < Amount)
                    {
                        throw new AccountException("Insufficient balance");

                    }
                    account.Balance = account.Balance - Amount;
                    account.LastTransactionDate = DateTime.Now;
                    account.TransactionCount = account.TransactionCount + 1;

                }
                else
                {
                    throw new AccountException("Account Not Found , Please input valid account number");
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        public void CalculateInterestAndUpdateBalance()
        {
            throw new NotImplementedException();
        }

    }
}

AccountModels.cs
--------------------

﻿
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BankingProject
{
    /// <summary>
    /// Represents a bank account.
    /// </summary>
    public class AccountModel : INotifyPropertyChanged
    {
       

        /// <summary>
        /// Gets or sets the account number.
        /// </summary>
        public int AccNo { get; set; }


        /// <summary>
        /// Gets or sets the account holder's name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the account type (e.g. savings, current).
        /// </summary>

        private string _accType;
        public string AccType
        {
            get { return _accType; }
            set
            {
                _accType = value;
                OnPropertyChanged(nameof(AccType));
            }
        }
        /// <summary>
        /// Gets or sets the account holder's email address.
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the account holder's address.
        /// </summary>

        private string _address;
        public string Address
        {
            get { return _address; }
            set
            {
                _address = value;
                OnPropertyChanged(nameof(Address));
            }
        }

        /// <summary>
        /// Gets or sets the account holder's phone number.
        /// </summary>

        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the account is active.
        /// </summary>

        private bool _isActive;
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                _isActive = value;
                OnPropertyChanged(nameof(IsActive));
            }
        }

        /// <summary>
        /// Gets or sets the account balance.
        /// </summary>

        private decimal _balance;
        public decimal Balance
        {
            get { return _balance; }
            set
            {
                _balance = value;
                OnPropertyChanged(nameof(Balance));
            }
        }

        /// <summary>
        /// Gets or sets the interest percentage for the account.
        /// </summary>

        private string _interestPercentage;

        public string InterestPercentage
        {
            get { return _interestPercentage; }
            set
            {
                _interestPercentage = value;
                OnPropertyChanged(nameof(InterestPercentage));
            }
        }

        /// <summary>
        /// Gets or sets the number of transactions made on the account.
        /// </summary>

        private int _transactionCount;

        public int TransactionCount
        {
            get { return _transactionCount; }
            set
            {
                _transactionCount = value;
                OnPropertyChanged(nameof(TransactionCount));
            }
        }

        /// <summary>
        /// Gets or sets the date of the last transaction made on the account.
        /// </summary>
        private DateTime _lastTrasnsactionDate;

        public DateTime LastTransactionDate
        {
            get { return _lastTrasnsactionDate; }
            set
            {
                _lastTrasnsactionDate = value;
                OnPropertyChanged(nameof(LastTransactionDate));
            }
        }

        /// <summary>
        /// Occurs when a property value changes.
        /// </summary>

        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises the PropertyChanged event.
        /// </summary>
        /// <param name="propertyName">The name of the property that changed.</param>
        private void OnPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

    }
}

AccountTypeViewModels.cs
---------------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using OxyPlot;
using OxyPlot.Series;
namespace BankingProject
{
    public class AccountTypeViewModel : INotifyPropertyChanged
    {
        public PlotModel BarChartModel { get; set; }
        public ObservableCollection<string> AccountTypes { get; set; }
        public AccountTypeViewModel(ObservableCollection<AccountModel> accounts)
        {
            BarChartModel = new PlotModel { Title = "Accounts by Type" };

            AccountTypes = new ObservableCollection<string>();
            CreateBarchart(accounts);
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        private void CreateBarchart(ObservableCollection<AccountModel> accounts)
        {
            BarChartModel.Series.Clear();
            BarChartModel.Axes.Clear();


            var series = new BarSeries();
            

            // Group accounts by type
            var accountGroups = accounts.GroupBy(a => a.AccType).Select(g => new
            {
                Type = g.Key,
                Count = g.Count(),
                TotalBalance = g.Sum(a => a.Balance)
            }).ToList();

            // Adding axis labels
            BarChartModel.Axes.Add(new OxyPlot.Axes.CategoryAxis
            {
                Position = OxyPlot.Axes.AxisPosition.Left,
                ItemsSource = accountGroups.Select(g => g.Type).ToList() ,// Get account types
                Title= "Account Types"
                
            });

            BarChartModel.Axes.Add(new OxyPlot.Axes.LinearAxis
            {
                Position = OxyPlot.Axes.AxisPosition.Bottom,
                Minimum = 0,
                Maximum = accountGroups.Max(g => g.Count) * 1.1,
                Title = "Number of accounts"
            });
            // Add bar items to the series
            for (int i = 0; i < accountGroups.Count; i++)
            {
                series.Items.Add(new BarItem(accountGroups[i].Count));

                AccountTypes.Add(accountGroups[i].Type);
            }

            BarChartModel.Series.Add(series);
        }

        public void UpdateBarChart(ObservableCollection<AccountModel> accounts)
        {
            CreateBarchart(accounts);

            OnPropertyChanged(nameof(BarChartModel));
        }
    }
}



AccountTypeWindow.xaml
-----------------------
﻿<Window x:Class="BankingProject.AccountTypeWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:oxy="http://oxyplot.org/wpf" xmlns:local="clr-namespace:BankingProject" d:DataContext="{d:DesignInstance Type=local:AccountModel}" mc:Ignorable="d" Title="AccountTypeWindow" Height="450" Width="800" Closing="Window_Closing">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <oxy:PlotView x:Name="plotview" Height="300" Width="500" Model="{Binding BarChartModel}"/>



        <ListBox x:Name="lstAccountTypes" Grid.Column="1" ItemsSource="{Binding AccType}" />
    </Grid>

</Window>


AccountTypeWindow.xaml.cs
------------------------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace BankingProject
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class AccountListWindow : Window
    {
        public AccountListWindow()
        {
            InitializeComponent();
            this.DataContext = AccountConfig.VueModel;

        }

        

      

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            AccountConfig.newAccountWindow.Show();
            AddAccountWindow newAccountWindow = (AddAccountWindow)AccountConfig.newAccountWindow;
            AccountConfig.VueModel.NewWindowClose = newAccountWindow.WindowClose;

        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            if (grdAccounts.SelectedIndex == -1) 
            {
                var result = MessageBox.Show(messageBoxText: "Are you sure to update?",
                    caption: "Confirm",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);
                return;
            }
            AccountConfig.editAccountWindow.Show();

            EditAccountWindow newEditWindow = (EditAccountWindow)AccountConfig.editAccountWindow;
            AccountConfig.VueModel.EditWindowClose = newEditWindow.WindowClose;

        }

        private void Window_Closed(object sender, EventArgs e)
        {
            Application.Current.Shutdown();
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }

        private void btnView_Click(object sender, RoutedEventArgs e)
        {

            if (grdAccounts.SelectedIndex == -1)
            {
                var result = MessageBox.Show(messageBoxText: "Please select an account",
                    caption: "Alert",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);
                return;
            }
            AccountConfig.accountViewWindow.Show();
        }
    }
}

AccountMemoryRepo.cs
--------------------------
﻿using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;
using System.Windows;


namespace BankingProject
{
    /// <summary>
    /// Represents a repository for managing accounts in memory.
    /// </summary>
    public class AccountMemoryRepo : IAccountRepo
    {
        /// <summary>
        /// Gets the instance of the AccountMemoryRepo class.
        /// </summary>
        private static AccountMemoryRepo _instance;


        private ObservableCollection<AccountModel> accounts;

        /// <summary>
        /// Initializes a new instance of the AccountMemoryRepo class.
        /// </summary>

        private AccountMemoryRepo()
        {
            accounts = new ObservableCollection<AccountModel>();
            InitializeAccounts();

        }
        /// <summary>
        /// Initializes the accounts collection with default accounts.
        /// </summary>

        private void InitializeAccounts()
        {
            accounts.Add(new AccountModel

            {
                AccNo = 123,
                Name = "Dinoy",
                Balance = 0,
                AccType = "savings",
                Email = "dinoy@gmail.com",
                PhoneNumber = "5236526526",
                Address = "mulakkampilly",
                IsActive = true,
                InterestPercentage = "0",
                TransactionCount = 0,
                LastTransactionDate = DateTime.Now,


            });
            accounts.Add(new AccountModel
            {
                AccNo = 124,
                Name = "Davis",
                Balance = 0,
                AccType = "current",
                Email = "davis@gmail.com",
                PhoneNumber = "5236526526",
                Address = "tharayil",
                IsActive = true,
                InterestPercentage = "0",
                TransactionCount = 0,
                LastTransactionDate = DateTime.Now,
            });
        }

        /// <summary>
        /// Creates an object for the AccountMemoryRepo class
        /// </summary>

        public static AccountMemoryRepo Instance 
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new AccountMemoryRepo();
                }
                return _instance;
            }
        }

        /// <summary>
        /// Creates a new account in the repository.
        /// </summary>
        /// <param name="account">The account to create.</param>
        /// <exception cref="AccountException">Thrown if an error occurs while creating the account.</exception>
        public void Create(AccountModel account)
        {
            try
            {
                accounts.Add(account);
            }
            catch (AccountException ae)
            {
                throw new AccountException("Error in creating account");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Updates an existing account in the repository.
        /// </summary>
        /// <param name="account">The account to update.</param>
        /// <exception cref="AccountException">Thrown if the account does not exist.</exception>
        public void UpdateAccount(AccountModel account)
        {
            try
            {
                var existingAccount = accounts.FirstOrDefault(a => a.AccNo == account.AccNo);
                if (existingAccount != null)
                {
                    existingAccount.Address = account.Address;
                }
                else
                {
                    throw new AccountException("Account doesn't exists");
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Retrieves all accounts from the repository.
        /// </summary>
        /// <returns>A collection of all accounts in the repository.</returns>
        /// <exception cref="AccountException">Thrown if an error occurs while reading accounts.</exception>
        public ObservableCollection<AccountModel> ReadAllAccount()
        {
            try
            {
                return accounts;
            }
            catch (AccountException ae)
            {
                throw new AccountException("Error reading accounts");
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        /// <summary>
        /// Deletes an account from the repository.
        /// </summary>
        /// <param name="acNo">The account number of the account to delete.</param>
        /// <param name="account">The account to delete.</param>
        public void DeleteAccount(int acNo, AccountModel account)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Deposits a specified amount into an account.
        /// </summary>
        /// <param name="acNo">The account number of the account to deposit into.</param>
        /// <param name="Amount">The amount to deposit.</param>
        /// <exception cref="AccountException">Thrown if the account does not exist</exception>

        public void Deposit(int acNo, int Amount)
        {

            try
            {
                var account = accounts.FirstOrDefault(a => a.AccNo == acNo);
                if (account != null)
                {
                    account.Balance = account.Balance + Amount;
                    account.LastTransactionDate = DateTime.Now;
                    account.TransactionCount = account.TransactionCount + 1;

                }
                else
                {
                    throw new AccountException("Account Not Found , Please input valid account number");
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        /// <summary>
        /// Withdraws a specified amount from an account.
        /// </summary>
        /// <param name="acNo">The account number of the account to withdraw from.</param>
        /// <param name="Amount">The amount to withdraw.</param>
        /// <exception cref="AccountException">Thrown if the account does not exist or if the balance is insufficient.</exception>

        public void Withdrw(int acNo, int Amount)
        {
            try
            {
                var account = accounts.FirstOrDefault(a => a.AccNo == acNo);
                if (account != null)
                {
                    if (account.Balance < Amount)
                    {
                        throw new AccountException("Insufficient balance");

                    }
                    account.Balance = account.Balance - Amount;
                    account.LastTransactionDate = DateTime.Now;
                    account.TransactionCount = account.TransactionCount + 1;

                }
                else
                {
                    throw new AccountException("Account Not Found , Please input valid account number");
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        public void CalculateInterestAndUpdateBalance()
        {
            throw new NotImplementedException();
        }

    }
}

AccountModels.cs
--------------------


﻿
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BankingProject
{
    /// <summary>
    /// Represents a bank account.
    /// </summary>
    public class AccountModel : INotifyPropertyChanged
    {
       

        /// <summary>
        /// Gets or sets the account number.
        /// </summary>
        public int AccNo { get; set; }


        /// <summary>
        /// Gets or sets the account holder's name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the account type (e.g. savings, current).
        /// </summary>

        private string _accType;
        public string AccType
        {
            get { return _accType; }
            set
            {
                _accType = value;
                OnPropertyChanged(nameof(AccType));
            }
        }
        /// <summary>
        /// Gets or sets the account holder's email address.
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the account holder's address.
        /// </summary>

        private string _address;
        public string Address
        {
            get { return _address; }
            set
            {
                _address = value;
                OnPropertyChanged(nameof(Address));
            }
        }

        /// <summary>
        /// Gets or sets the account holder's phone number.
        /// </summary>

        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the account is active.
        /// </summary>

        private bool _isActive;
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                _isActive = value;
                OnPropertyChanged(nameof(IsActive));
            }
        }

        /// <summary>
        /// Gets or sets the account balance.
        /// </summary>

        private decimal _balance;
        public decimal Balance
        {
            get { return _balance; }
            set
            {
                _balance = value;
                OnPropertyChanged(nameof(Balance));
            }
        }

        /// <summary>
        /// Gets or sets the interest percentage for the account.
        /// </summary>

        private string _interestPercentage;

        public string InterestPercentage
        {
            get { return _interestPercentage; }
            set
            {
                _interestPercentage = value;
                OnPropertyChanged(nameof(InterestPercentage));
            }
        }

        /// <summary>
        /// Gets or sets the number of transactions made on the account.
        /// </summary>

        private int _transactionCount;

        public int TransactionCount
        {
            get { return _transactionCount; }
            set
            {
                _transactionCount = value;
                OnPropertyChanged(nameof(TransactionCount));
            }
        }

        /// <summary>
        /// Gets or sets the date of the last transaction made on the account.
        /// </summary>
        private DateTime _lastTrasnsactionDate;

        public DateTime LastTransactionDate
        {
            get { return _lastTrasnsactionDate; }
            set
            {
                _lastTrasnsactionDate = value;
                OnPropertyChanged(nameof(LastTransactionDate));
            }
        }

        /// <summary>
        /// Occurs when a property value changes.
        /// </summary>

        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises the PropertyChanged event.
        /// </summary>
        /// <param name="propertyName">The name of the property that changed.</param>
        private void OnPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }


    }
}



AccountType.xaml
------------------
﻿<Window x:Class="BankingProject.AccountTypeWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:oxy="http://oxyplot.org/wpf" xmlns:local="clr-namespace:BankingProject" d:DataContext="{d:DesignInstance Type=local:AccountModel}" mc:Ignorable="d" Title="AccountTypeWindow" Height="450" Width="800" Closing="Window_Closing">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <oxy:PlotView x:Name="plotview" Height="300" Width="500" Model="{Binding BarChartModel}"/>



        <ListBox x:Name="lstAccountTypes" Grid.Column="1" ItemsSource="{Binding AccType}" />
    </Grid>

</Window>

AccountType.xaml.cs
--------------------

﻿using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using OxyPlot;
using OxyPlot.Series;

namespace BankingProject
{
    public partial class AccountTypeWindow : Window
    {
        public AccountTypeWindow()
        {
            //InitializeComponent();
            //this.DataContext = AccountConfig.accountTypeWindow;
            InitializeComponent();
            var accounts = AccountConfig.VueModel.Accounts;
            var viewModel = new AccountTypeViewModel(accounts);
            this.DataContext = viewModel;
        }

        private void Window_Closing(object sender, CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}

AccountViewModel.cs
------------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using OxyPlot;
using OxyPlot.Series;
namespace BankingProject
{
    public class AccountTypeViewModel : INotifyPropertyChanged
    {
        public PlotModel BarChartModel { get; set; }
        public ObservableCollection<string> AccountTypes { get; set; }
        public AccountTypeViewModel(ObservableCollection<AccountModel> accounts)
        {
            BarChartModel = new PlotModel { Title = "Accounts by Type" };

            AccountTypes = new ObservableCollection<string>();
            CreateBarchart(accounts);
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        private void CreateBarchart(ObservableCollection<AccountModel> accounts)
        {
            BarChartModel.Series.Clear();
            BarChartModel.Axes.Clear();


            var series = new BarSeries();
            

            // Group accounts by type
            var accountGroups = accounts.GroupBy(a => a.AccType).Select(g => new
            {
                Type = g.Key,
                Count = g.Count(),
                TotalBalance = g.Sum(a => a.Balance)
            }).ToList();

            // Adding axis labels
            BarChartModel.Axes.Add(new OxyPlot.Axes.CategoryAxis
            {
                Position = OxyPlot.Axes.AxisPosition.Left,
                ItemsSource = accountGroups.Select(g => g.Type).ToList() ,// Get account types
                Title= "Account Types"
                
            });

            BarChartModel.Axes.Add(new OxyPlot.Axes.LinearAxis
            {
                Position = OxyPlot.Axes.AxisPosition.Bottom,
                Minimum = 0,
                Maximum = accountGroups.Max(g => g.Count) * 1.1,
                Title = "Number of accounts"
            });
            // Add bar items to the series
            for (int i = 0; i < accountGroups.Count; i++)
            {
                series.Items.Add(new BarItem(accountGroups[i].Count));

                AccountTypes.Add(accountGroups[i].Type);
            }

            BarChartModel.Series.Add(series);
        }

        public void UpdateBarChart(ObservableCollection<AccountModel> accounts)
        {
            CreateBarchart(accounts);

            OnPropertyChanged(nameof(BarChartModel));
        }
    }
}


AccountViewModel.cs
-----------------------

﻿using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows;
using System.Security.Principal;
using System.Security.RightsManagement;
using System.Globalization;
using System.Windows.Data;
using log4net.Repository.Hierarchy;

namespace BankingProject
{
    public delegate void DWidnowClose();

    // <summary>
    /// Represents a view model for managing accounts.
    /// </summary>
    public class AccountViewModel : INotifyPropertyChanged
    {
        public DWidnowClose NewWindowClose;
        public DWidnowClose EditWindowClose;


        public event PropertyChangedEventHandler PropertyChanged;
        private void OnPropertyChanged(string propName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propName));
        }



        /// <summary>
        /// Gets or sets the new account.
        /// </summary>


        private AccountModel _newAccount = null;

        public AccountModel NewAccount
        {
            get { return _newAccount; }
            set
            {
                _newAccount = value;
                OnPropertyChanged(nameof(NewAccount));
            }
        }

        /// <summary>
        /// Gets or sets the selected account.
        /// </summary>

        private AccountModel _selectedAccount = null;
        public AccountModel SelectedAccount
        {
            get => _selectedAccount;
            set { _selectedAccount = value; OnPropertyChanged(nameof(SelectedAccount)); }
        }

        /// <summary>
        /// Gets the accounts repository.
        /// </summary>

        private IAccountRepo _repo =  AccountMemoryRepo.Instance;

        // <summary>
        /// Gets the collection of accounts.
        /// </summary>  
        public ObservableCollection<AccountModel> Accounts
        {
            get
            {
                try
                {
                    return _repo.ReadAllAccount();
                }
                catch (AccountException ae)
                {
                    Logger.log.Error(ae.Message);
                    throw;
                }

            }
        }

        /// <summary>
        /// Gets the command for creating a new account.
        /// </summary>
        public ICommand CreateCommand { get; }

        /// <summary>
        /// Gets the command for updating an existing account.
        /// </summary>
        public ICommand UpdateCommand { get; }


        //public ICommand ShowAccountTypeCommand { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountViewModel"/> class.
        /// </summary>
        public AccountViewModel()
        {
            this.NewAccount = new AccountModel
            {
                AccNo = 00000,
                Name = "",
                Balance = 0,
                AccType = "",
                Email = "",
                PhoneNumber = "",
                Address = "",
                IsActive = false,
                InterestPercentage = "0",
                TransactionCount = 0,
                LastTransactionDate = DateTime.Now,


            };
            CreateCommand = new RelayCommand(Create);
            UpdateCommand = new RelayCommand(Update);
            //ShowAccountTypeCommand = new RelayCommand(ShowAccountType);
        }

        /// <summary>
        /// Creates a new account.
        /// </summary>

        public void Create()
        {
            AccountModel newAccount = new AccountModel
            {
                AccNo = NewAccount.AccNo,
                Name = NewAccount.Name,
                Balance = NewAccount.Balance,
                AccType = NewAccount.AccType,
                Email = NewAccount.Email,
                PhoneNumber = NewAccount.PhoneNumber,
                Address = NewAccount.Address,
                IsActive = NewAccount.IsActive,
                InterestPercentage = NewAccount.InterestPercentage,
                TransactionCount = NewAccount.TransactionCount,
                LastTransactionDate = NewAccount.LastTransactionDate,
            };
            var result = MessageBox.Show(messageBoxText: "Are you sure to create?",
                    caption: "Confirm",
                    button: MessageBoxButton.YesNo,
                    icon: MessageBoxImage.Question);
            if (result != MessageBoxResult.Yes)
            {
                return;
            }

            try
            {
                _repo.Create(newAccount);

                result = MessageBox.Show(messageBoxText: "Created Successfully",
                        caption: "Alert",
                        button: MessageBoxButton.OK,
                        icon: MessageBoxImage.Information);
                Logger.log.Info($"An account with acoount number {newAccount.AccNo} has been created successfully");


                this.NewAccount = new AccountModel { AccNo = 0, Name = "", Balance = 0, AccType = "", Email = "", PhoneNumber = "", Address = "", IsActive = false, InterestPercentage = "0", TransactionCount = 0, LastTransactionDate = DateTime.Now };
            }
            catch (AccountException ae)
            {
                Logger.log.Error(ae.Message);
            }

            if (NewWindowClose != null)
            {
                NewWindowClose();
            }

        }

        /// <summary>
        /// Updates an existing account.
        /// </summary>

        public void Update()
        {
            if (this.SelectedAccount == null)
            {
                return ;
            }

            try
            {

                _repo.UpdateAccount(this.SelectedAccount);
                this.SelectedAccount = this.SelectedAccount;
                var result = MessageBox.Show(messageBoxText: $"Account {SelectedAccount.AccNo} is updated successfully",
                        caption: "Alert",
                        button: MessageBoxButton.OK,
                        icon: MessageBoxImage.Information);
                Logger.log.Info($"Account {SelectedAccount.AccNo} is updated successfully");
            }
            catch (AccountException ae)
            {
                Logger.log.Error(ae.Message);
            }


            if (EditWindowClose != null)
            {
                EditWindowClose();
            }
            //        _repo.UpdateAccount(this.SelectedAccount);
            //         this.SelectedAccount = this.SelectedAccount;
            //        var result = MessageBox.Show(messageBoxText: "Updated Successfully",
            //        caption: "Alert",
            //        button: MessageBoxButton.OK,
            //        icon: MessageBoxImage.Information);


            //    if (EditWindowClose != null)
            //{
            //    EditWindowClose();
            //}



        }


        //private void ShowAccountType()
        //{
        //    var accountTypeWindow = new AccountTypeWindow();
        //    accountTypeWindow.ShowDialog();
        //}



    }
}

AccountViewWindow.xaml
----------------------
﻿<Window x:Class="BankingProject.AccountViewWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankingProject"
        mc:Ignorable="d"
        Title="AccountView
        Window" Height="450" Width="800" Closing="Window_Closing">
    <Grid MaxWidth="1200">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <TextBlock Text="Account Details" Background="LightGreen"  FontSize="32" FontWeight="bold" TextAlignment="Center" FontFamily="georgia"  Grid.Row="0" Margin="10 20 10 10"/>
        <Grid Grid.Row="1" Margin="10 20 10 10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <!--<ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>-->
            </Grid.ColumnDefinitions>
            <Border x:Name="brd1" Grid.Column="0"  CornerRadius="2" BorderThickness="1" BorderBrush="gray">
                <StackPanel Margin="10 10 10 10">
                    <TextBlock  FontSize="24" Foreground="green" Text="{Binding SelectedAccount.Balance}"/>
                    <TextBlock FontWeight="bold" FontSize="12" Margin="10 10 10 2"><Run Text="Account Balance"/></TextBlock>
                </StackPanel>
            </Border>
        </Grid>
        <Grid Grid.Row="2" Margin="10 20 10 10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="250"/>
            </Grid.ColumnDefinitions>
            <Border Grid.Column="0" Background="Green"
                CornerRadius="3">
                <StackPanel Orientation="vertical">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Account Number" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.AccNo}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Name" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.Name}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Type" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.AccType}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Email" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.Email}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Phone Number" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.PhoneNumber}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Address" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.Address}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Transaction Count" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.TransactionCount}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Last Transaction" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.LastTransactionDate}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Interest Percentage" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.InterestPercentage}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                </StackPanel>
            </Border>

            <Border Grid.Column="1" Background="LightGreen" Margin="10 0 0 0" CornerRadius="3">

            </Border>
        </Grid>
    </Grid>
</Window>

AccountViewWindow.xaml.cs
---------------------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankingProject
{
    /// <summary>
    /// Interaction logic for LoginWindow.xaml
    /// </summary>
    public partial class AccountViewWindow : Window
    {
        public AccountViewWindow()
        {
            InitializeComponent();
            this.DataContext = AccountConfig.VueModel;
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}

AddAccountWindow.xaml
--------------------------
﻿<Window x:Class="BankingProject.AddAccountWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankingProject"
        mc:Ignorable="d"
        Title="AddAccountWindow" Height="900" Width="800" Closing="Window_Closing">

    
    <Grid MaxWidth="1200" Margin="0 0 0 0">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
        <DockPanel LastChildFill="True">
            
            <TextBlock Grid.Row="0" TextAlignment="center" Text="New Account"
                   FontSize="22" FontWeight="Bold" Background="ForestGreen" DockPanel.Dock="top" Margin="0 0 0 20" Height="43" />
        </DockPanel>
        <StackPanel Grid.Row="1" Orientation="Vertical" Margin="0 10 0 0">
            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Account Number"/>
                <TextBox  Width="300" Margin="100 0 0 0" Text="{Binding NewAccount.AccNo}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Name"/>
                <TextBox  Width="300" Margin="100 0 0 0" Text="{Binding NewAccount.Name}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Balance" />
                <TextBox  Width="300" Margin="100 0 0 0" Text="{Binding NewAccount.Balance}" />
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Type"/>
                <RadioButton x:Name="CurrentRadioButton" Content="current"  Margin="100 0 0 0" Checked="CurrentRadioButton_Checked" />
                <RadioButton x:Name="SavingsRadioButton" Content="savings" Checked="SavingsRadioButton_Checked"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Email"/>
                <TextBox  Width="300" Margin="100 0 0 0" Text="{Binding NewAccount.Email}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Phone"/>
                <TextBox  Width="300" Margin="100 0 0 0" Text="{Binding NewAccount.PhoneNumber}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Address"/>
                <TextBox  Width="300" Margin="100 0 0 0" Text="{Binding NewAccount.Address}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="IsActive"/>
                <CheckBox Content="" Margin="100 0 0 0"  Checked="CheckBox_Checked"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text= "Interest Percentage" />
                <ComboBox Margin="100 0 0 0" Text="{Binding NewAccount.InterestPercentage}" >
                    <ComboBoxItem x:Name="cmb5" Content="5%"  />
                    <ComboBoxItem x:Name="cmb10" Content="10%"/>
                    <ComboBoxItem x:Name="cmb15" Content="15%"/>
                </ComboBox>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Transaction Count"/>
                <TextBox Width="300" IsEnabled="False" Margin="100 0 0 0" Text="{Binding NewAccount.TransactionCount}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Last Transaction Date"/>
                <TextBox Width="300" IsEnabled="False" Margin="100 0 0 0" Text="{Binding NewAccount.LastTransactionDate}"/>
            </StackPanel>
        </StackPanel>

        <Button HorizontalAlignment="right" Grid.Row="2" Width="200" Background="ForestGreen" Content="Save" Foreground="White" FontWeight="bold"
                Height="50"
                Margin="0 10 20 20"
                Command="{Binding CreateCommand}" Click="Button_Click"/>

    </Grid>
</Window>

AddAccountWindow.xaml.cs
-----------------------------


﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankingProject
{
    /// <summary>
    /// Interaction logic for AddAccountWindow.xaml
    /// </summary>
    public partial class AddAccountWindow : Window
    {
        public AddAccountWindow()
        {
            InitializeComponent();
            this.DataContext = AccountConfig.VueModel;

        }
        public void WindowClose()
        {
            this.Hide();
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }

        private void CurrentRadioButton_Checked(object sender, RoutedEventArgs e)
        {

            AccountConfig.VueModel.NewAccount.AccType = (string)AccountConfig.newAccountWindow.CurrentRadioButton.Content;
        }

        private void SavingsRadioButton_Checked(object sender, RoutedEventArgs e)
        {
            AccountConfig.VueModel.NewAccount.AccType = (string)AccountConfig.newAccountWindow.SavingsRadioButton.Content;
        }

        private void CheckBox_Checked(object sender, RoutedEventArgs e)
        {
            AccountConfig.VueModel.NewAccount.IsActive = true;
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            AccountConfig.VueModel.Accounts.Add(AccountConfig.VueModel.NewAccount);

            // Update the AccountTypeViewModel
            var accountTypeViewModel = new AccountTypeViewModel(AccountConfig.VueModel.Accounts);
            AccountConfig.accountTypeWindow.DataContext = accountTypeViewModel;

            // Close the AddAccountWindow
            this.Hide();
        }
    }
}

App.config
---------------
﻿<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<startup>
		<supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
	</startup>

	<configSections>
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
	</configSections>

	<log4net>
		<appender name="FileAppender" type="log4net.Appender.RollingFileAppender">
			<file value="logfile.log" />
			<appendToFile value="true" />
			<rollingStyle value="Size" />
			<maxSizeRollBackups value="5" />
			<maximumFileSize value="10MB" />
			<staticLogFileName value="true" />
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date [%thread] %-5level %logger - %message%newline" />
			</layout>
		</appender>
		<root>
			<level value="ALL" />
			<appender-ref ref="FileAppender" />
		</root>
	</log4net>
</configuration>

App.xaml
-------------
﻿<Application x:Class="BankingProject.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:BankingProject"
             StartupUri="LoginPageWindow.xaml">
    <Application.Resources>
         
    </Application.Resources>
</Application>

App.xaml.cs
-------------------
﻿using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;

namespace BankingProject
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application
    {
    }
}

BankingProject.csproj
----------------------

﻿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{1517D64B-BF64-4025-A25A-EE0AA4202A03}</ProjectGuid>
    <OutputType>WinExe</OutputType>
    <RootNamespace>BankingProject</RootNamespace>
    <AssemblyName>BankingProject</AssemblyName>
    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ProjectTypeGuids>{60dc8134-eba5-43b8-bcc9-bb4bc16c2548};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <WarningLevel>4</WarningLevel>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <Deterministic>true</Deterministic>
    <NuGetPackageImportStamp>
    </NuGetPackageImportStamp>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="log4net, Version=3.0.1.0, Culture=neutral, PublicKeyToken=669e0ddf0bb1aa2a, processorArchitecture=MSIL">
      <HintPath>..\packages\log4net.3.0.1\lib\net462\log4net.dll</HintPath>
    </Reference>
    <Reference Include="OxyPlot, Version=2.2.0.0, Culture=neutral, PublicKeyToken=638079a8f0bd61e9, processorArchitecture=MSIL">
      <HintPath>..\packages\OxyPlot.Core.2.2.0\lib\net462\OxyPlot.dll</HintPath>
    </Reference>
    <Reference Include="OxyPlot.Wpf, Version=2.2.0.0, Culture=neutral, PublicKeyToken=75e952ba404cdbb0, processorArchitecture=MSIL">
      <HintPath>..\packages\OxyPlot.Wpf.2.2.0\lib\net462\OxyPlot.Wpf.dll</HintPath>
    </Reference>
    <Reference Include="OxyPlot.Wpf.Shared, Version=2.2.0.0, Culture=neutral, PublicKeyToken=75e952ba404cdbb0, processorArchitecture=MSIL">
      <HintPath>..\packages\OxyPlot.Wpf.Shared.2.2.0\lib\net462\OxyPlot.Wpf.Shared.dll</HintPath>
    </Reference>
    <Reference Include="ReachFramework" />
    <Reference Include="System" />
    <Reference Include="System.Configuration" />
    <Reference Include="System.Data" />
    <Reference Include="System.Printing" />
    <Reference Include="System.Web" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.Net.Http" />
    <Reference Include="System.Xaml">
      <RequiredTargetFramework>4.0</RequiredTargetFramework>
    </Reference>
    <Reference Include="WindowsBase" />
    <Reference Include="PresentationCore" />
    <Reference Include="PresentationFramework" />
  </ItemGroup>
  <ItemGroup>
    <ApplicationDefinition Include="App.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </ApplicationDefinition>
    <Compile Include="AccountException.cs" />
    <Compile Include="AccountMemoryRepo.cs" />
    <Compile Include="AccountTypeViewModel.cs" />
    <Compile Include="AccountTypeWindow.xaml.cs">
      <DependentUpon>AccountTypeWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="DashBoardWindow.xaml.cs">
      <DependentUpon>DashBoardWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="DepositViewModel.cs" />
    <Compile Include="DepositWindow.xaml.cs">
      <DependentUpon>DepositWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="IAccountRepo.cs" />
    <Compile Include="ListWindow.xaml.cs">
      <DependentUpon>ListWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="AccountViewWindow.xaml.cs">
      <DependentUpon>AccountViewWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="Logger.cs" />
    <Compile Include="LoginPageWindow.xaml.cs">
      <DependentUpon>LoginPageWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="RelayCommand.cs" />
    <Compile Include="WithdrawViewModel.cs" />
    <Compile Include="WithdrawWindow.xaml.cs">
      <DependentUpon>WithdrawWindow.xaml</DependentUpon>
    </Compile>
    <Page Include="AccountTypeWindow.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="AddAccountWindow.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="DashBoardWindow.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="DepositWindow.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="EditAccountWindow.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="AccountListWindow.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Compile Include="AccountModel.cs" />
    <Compile Include="AccountViewModel.cs" />
    <Compile Include="AddAccountWindow.xaml.cs">
      <DependentUpon>AddAccountWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="App.xaml.cs">
      <DependentUpon>App.xaml</DependentUpon>
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="AccountConfig.cs" />
    <Compile Include="EditAccountWindow.xaml.cs">
      <DependentUpon>EditAccountWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="AccountListWindow.xaml.cs">
      <DependentUpon>AccountListWindow.xaml</DependentUpon>
      <SubType>Code</SubType>
    </Compile>
    <Page Include="ListWindow.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="AccountViewWindow.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="LoginPageWindow.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="WithdrawWindow.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <None Include="packages.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
  </ItemGroup>
  <ItemGroup>
    <None Include="App.config" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <Import Project="..\packages\Microsoft.NETFramework.ReferenceAssemblies.net472.1.0.2\build\Microsoft.NETFramework.ReferenceAssemblies.net472.targets" Condition="Exists('..\packages\Microsoft.NETFramework.ReferenceAssemblies.net472.1.0.2\build\Microsoft.NETFramework.ReferenceAssemblies.net472.targets')" />
  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('..\packages\Microsoft.NETFramework.ReferenceAssemblies.net472.1.0.2\build\Microsoft.NETFramework.ReferenceAssemblies.net472.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\Microsoft.NETFramework.ReferenceAssemblies.net472.1.0.2\build\Microsoft.NETFramework.ReferenceAssemblies.net472.targets'))" />
  </Target>
</Project>

DashBoardWindow.xaml
-----------------------
﻿<Window x:Class="BankingProject.DashBoardWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:BankingProject" mc:Ignorable="d" Title="DashBoardWindow" Height="450" Width="800" Closed="Window_Closed_1">
    <Grid MaxWidth="1200">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <DockPanel LastChildFill="True">
            <TextBlock Text="DashBoard" TextAlignment="Center" FontSize="32" DockPanel.Dock="Top" FontWeight="bold" Grid.Row="0" Background="ForestGreen" Margin="0 0 0 100"/>
        </DockPanel>
        <Grid Grid.Row="1" Margin="10 20 10 10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="brd1" Grid.Column="0" CornerRadius="2" Background="ForestGreen" BorderThickness="1" BorderBrush="gray">
                <StackPanel Margin="10 10 10 10">
                    <TextBlock FontWeight="bold" FontSize="10" Margin="10 10 10 2">Your Balance</TextBlock>
                    <TextBlock  FontSize="42" Margin="30 2 10 2" Foreground="YellowGreen">$500</TextBlock>
                </StackPanel>
            </Border>

            <Button x:Name="btnDeposit" Grid.Column="1" Margin="20 0 0 0" Content="Deposit" FontSize="12"
              Background="ForestGreen" FontWeight="Bold"
              Foreground="black"
                Click="btnDeposit_Click"/>


            <Button x:Name="btnWithdraw" Grid.Column="2" Margin="20 0 0 0" Content="Withdraw" FontSize="12"
                   Background="ForestGreen" FontWeight="Bold"
                    Foreground="black"
                Click="btnWithdraw_Click"/>

            <Button x:Name="btnManager" Grid.Column="3" Margin="20 0 0 0" Content="Account Manager" FontSize="12"
       Background="ForestGreen" FontWeight="Bold"
        Foreground="black"
                Click="btnManager_Click"/>

            <Button x:Name="btnAccountType" Grid.Column="4"  Content="BarChart" FontSize="12"
           Background="ForestGreen" FontWeight="Bold"
            Foreground="black"
             Margin="8,-2,-8,2" Click="btnAccountType_Click" />


        </Grid>

    </Grid>
</Window>

DashBoardWindow.xaml.cs
----------------------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankingProject
{
    /// <summary>
    /// Interaction logic for DashBoardWindow.xaml
    /// </summary>
    public partial class DashBoardWindow : Window
    {
        public DashBoardWindow()
        {
            InitializeComponent();
        }

        private void btnDeposit_Click(object sender, RoutedEventArgs e)
        {
            AccountConfig.depositWindow.Show();
        }

       

        private void btnManager_Click(object sender, RoutedEventArgs e)
        {
            AccountConfig.accountListWindow.Show();
        }

        private void btnWithdraw_Click(object sender, RoutedEventArgs e)
        {
            AccountConfig.withdrawWindow.Show();
        }

        private void Window_Closed_1(object sender, EventArgs e)
        {
            Application.Current.Shutdown();
        }

        private void btnAccountType_Click(object sender, RoutedEventArgs e)
        {
            
                AccountConfig.accountTypeWindow.Show();
            
        }
    }
}

DepositViewModel.cs
----------------------

﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows;
using log4net.Repository.Hierarchy;

namespace BankingProject
{
    /// <summary>
    /// Represents a view model for depositing money into an account.
    /// </summary>
    public class DepositViewModel : INotifyPropertyChanged
    {
       

        public event PropertyChangedEventHandler PropertyChanged;
        private void OnPropertyChanged(string propName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propName));
        }

        /// <summary>
        /// Gets or sets the account number.
        /// </summary>

        private int _accountNumber;
        public int AccountNumber
        {
            get { return _accountNumber; }
            set
            {
                _accountNumber = value;
                OnPropertyChanged(nameof(AccountNumber));
            }

        }
        /// <summary>
        /// Gets or sets the amount to deposit.
        /// </summary>

        private int _amount;

        public int Amount
        {
            get { return _amount; }
            set
            {
                _amount = value;
                OnPropertyChanged(nameof(Amount));
            }
        }
        /// <summary>
        /// Gets the accounts repository.
        /// </summary>

        private IAccountRepo _repo = AccountMemoryRepo.Instance;

        /// <summary>
        /// Gets the command for depositing money into an account.
        /// </summary>
        public ICommand DepositCommand { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="DepositViewModel"/> class.
        /// </summary>

        public DepositViewModel()
        {
            DepositCommand = new RelayCommand(Deposit);
        }

        /// <summary>
        /// Deposits money into an account.
        /// </summary>
        public void Deposit()
        {
            var result = MessageBox.Show(messageBoxText: "Are you sure to Deposit?",
                    caption: "Confirm",
                    button: MessageBoxButton.YesNo,
                    icon: MessageBoxImage.Question);
            if (result != MessageBoxResult.Yes)
            {
                return;
            }
            try
            {
                _repo.Deposit(AccountNumber, Amount);
                MessageBox.Show(messageBoxText: $"Deposited Successfully to account {AccountNumber}",
                        caption: "Alert",
                        button: MessageBoxButton.OK,
                        icon: MessageBoxImage.Information);
                Logger.log.Info($"Deposited {Amount} rupees Successfully to account {AccountNumber}");
                this.AccountNumber = 0;
                this.Amount = 0;
            }
            catch (AccountException ae)
            {
                MessageBox.Show(messageBoxText: $"{ae.Message}",
                   caption: "Warning",
                   button: MessageBoxButton.OK,
                   icon: MessageBoxImage.Warning);

                Logger.log.Error(ae.Message);
            }
            catch (Exception ex)
            {
                Logger.log.Error(ex.Message);
            }
        }
    }


}

DepositWindow.xaml
-----------------------

﻿<Window x:Class="BankingProject.DepositWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankingProject"
        mc:Ignorable="d"
        Title="DepositWindow" Height="450" Width="800">
    <Grid MaxWidth="1200">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Border Grid.Row="0" Background="AliceBlue" HorizontalAlignment="Center" VerticalAlignment="Center"
            CornerRadius="5">
            <StackPanel Margin="30">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Account Number" VerticalAlignment="Center" Width="200" FontWeight="bold"
                       FontSize="14" />
                    <TextBox Width="300" Height="30" Margin="10 0 0 0" Text="{Binding AccountNumber}"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal" Margin="0 10 0 0">
                    <TextBlock Text="Amount" VerticalAlignment="Center" Width="200" FontWeight="bold"
       FontSize="14"/>
                    <TextBox Width="300" Height="30" Margin="10 10 0 0" Text="{Binding Amount}"/>
                </StackPanel>

                <Button Content="Deposit" Background="Tomato" Foreground="white" FontWeight="bold"
                    Width="250" Height="50" Margin="0 20 0 0"
                    Command="{Binding DepositCommand}"/>
            </StackPanel>
        </Border>
    </Grid>
</Window>

DepositWindow.xaml.cs
------------------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankingProject
{
    /// <summary>
    /// Interaction logic for DepositWindow.xaml
    /// </summary>
    public partial class DepositWindow : Window
    {
        public DepositWindow()
        {
            InitializeComponent();
            this.DataContext = AccountConfig.depositViewModel;
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }

       
    }
}

EditAccountWindow.xaml
----------------------
﻿<Window x:Class="BankingProject.EditAccountWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankingProject"
        mc:Ignorable="d"
        Title="EditAccountWindow" Height="450" Width="800" Closing="Window_Closing">
    <Canvas>
        <TextBlock x:Name="lblAccountNumber" TextWrapping="Wrap" Text="Account Number"  Canvas.Left="150" Canvas.Top="86" Width="103" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <TextBlock x:Name="lblName" TextWrapping="Wrap" Text="Name" Canvas.Left="150" Canvas.Top="123" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <RadioButton Content="Savings" Canvas.Left="378" Canvas.Top="163" HorizontalAlignment="Center" VerticalAlignment="Center" IsEnabled="False"/>
        <RadioButton Content="Currrent" Canvas.Left="465" Canvas.Top="163" HorizontalAlignment="Center" VerticalAlignment="Center" IsEnabled="False"/>
        <TextBlock x:Name="lblType" TextWrapping="Wrap" Text="Account Type" Canvas.Left="150" Canvas.Top="162" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <TextBlock x:Name="lblEmail" TextWrapping="Wrap" Text="Email" Canvas.Left="150" Canvas.Top="199" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <TextBlock x:Name="lblPhoneNumber" TextWrapping="Wrap" Text="Phone Number" Canvas.Left="150" Canvas.Top="232" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <TextBlock x:Name="lblAddress" TextWrapping="Wrap" Text="Address" Canvas.Left="151" Canvas.Top="263" RenderTransformOrigin="0.56,2.935" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <CheckBox Content="IsActive" Canvas.Left="378" Canvas.Top="301" HorizontalAlignment="Center" VerticalAlignment="Center" IsEnabled="False"/>
        <ComboBox  Width="120" Canvas.Left="378" Canvas.Top="349" HorizontalAlignment="Center" VerticalAlignment="Center" IsEnabled="False">
            <ComboBoxItem Content="1%"/>
            <ComboBoxItem Content="2%"/>
            <ComboBoxItem Content="3%"/>
            <ComboBoxItem Content="4%"/>
            <ComboBoxItem Content="5%"/>
            <ComboBoxItem Content="6%"/>
            <ComboBoxItem Content="7%"/>
            <ComboBoxItem Content="8%"/>
            <ComboBoxItem Content="9%"/>
            <ComboBoxItem Content="10%"/>
            <ComboBoxItem Content="11%"/>
            <ComboBoxItem Content="12%"/>
            


        </ComboBox>
        <TextBox x:Name="txtAccountNumber" TextWrapping="Wrap" Width="120" Canvas.Left="378"  Text="{Binding SelectedAccount.AccNo}" Canvas.Top="85" HorizontalAlignment="Center" VerticalAlignment="Center" IsEnabled="False"/>
        <TextBox x:Name="txtName" TextWrapping="Wrap" Width="120"  Text="{Binding SelectedAccount.Name}" Canvas.Left="378" Canvas.Top="121" HorizontalAlignment="Center" VerticalAlignment="Center" IsEnabled="False"/>
        <TextBox x:Name="txtEmail"  Text="{Binding SelectedAccount.Email}" TextWrapping="Wrap" Width="120" Canvas.Left="378" Canvas.Top="199" HorizontalAlignment="Center" VerticalAlignment="Center" IsEnabled="False"/>
        <TextBox x:Name="txtPhoneNumber"  Text="{Binding SelectedAccount.PhoneNumber}" TextWrapping="Wrap" Width="120" Canvas.Left="378" Canvas.Top="230" HorizontalAlignment="Center" VerticalAlignment="Center" IsEnabled="False"/>
        <TextBox x:Name="txtAddress"  Text="{Binding SelectedAccount.Address}" TextWrapping="Wrap" Width="120" Canvas.Left="378" Canvas.Top="261" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <TextBlock x:Name="lblStatus"  TextWrapping="Wrap" Text="Status" Canvas.Left="151" Canvas.Top="303" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <TextBlock x:Name="lblPercentage" TextWrapping="Wrap" Text="Interest Percentage" Canvas.Left="151" Canvas.Top="347" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <Button x:Name="btnUpdate" Content="Update" Canvas.Left="301" Canvas.Top="393" HorizontalAlignment="Left" VerticalAlignment="Center" Width="60" Command="{Binding UpdateCommand}" />

    </Canvas>
</Window>

EditAccountWindow.xaml.cs
-------------------------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankingProject
{
    /// <summary>
    /// Interaction logic for EditAccountWindow.xaml
    /// </summary>
    public partial class EditAccountWindow : Window
    {
        public EditAccountWindow()
        {
            InitializeComponent();
            this.DataContext = AccountConfig.VueModel;
        }
        public void WindowClose()
        {
            this.Hide();
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}

IAccountRepo.cs
--------------------
﻿using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;

namespace BankingProject
{
    /// <summary>
    /// Represents a repository for managing accounts.
    /// </summary>
    public interface IAccountRepo
    {
        /// <summary>
        /// Creates a new account.
        /// </summary>
        /// <param name="account">The account to create.</param>

        void Create(AccountModel account);

        /// <summary>
        /// Updates an existing account.
        /// </summary>
        /// <param name="account">The account to update.</param>
        void UpdateAccount(AccountModel account);

        /// <summary>
        /// Deletes an account.
        /// </summary>
        /// <param name="acNo">The account number of the account to delete.</param>
        /// <param name="account">The account to delete.</param>

        void DeleteAccount(int acNo, AccountModel account);

        /// <summary>
        /// Deposits money into an account.
        /// </summary>
        /// <param name="acNo">The account number of the account to deposit into.</param>
        /// <param name="Amount">The amount to deposit.</param>
        void Deposit(int acNo, int Amount);

        /// <summary>
        /// Withdraws money from an account.
        /// </summary>
        /// <param name="acNo">The account number of the account to withdraw from.</param>
        /// <param name="Amount">The amount to withdraw.</param>
        void Withdrw(int acNo, int Amount);

        /// <summary>
        /// Calculates the interest and updates the balance for all accounts.
        /// </summary>
        void CalculateInterestAndUpdateBalance();

        /// <summary>
        /// Retrieves all accounts.
        /// </summary>
        /// <returns>A collection of all accounts.</returns>
        /// 
        
        ObservableCollection<AccountModel> ReadAllAccount();


    }
}

ListWindow.xaml
----------------
﻿<Window x:Class="BankingProject.ListWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankingProject"
        mc:Ignorable="d"
        Title="ListWindow" Height="450" Width="800">
    <Grid>
        
    </Grid>
</Window>

ListWindow.xaml.cs
---------------------

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankingProject
{
    /// <summary>
    /// Interaction logic for ListWindow.xaml
    /// </summary>
    public partial class ListWindow : Window
    {
        public ListWindow()
        {
            InitializeComponent();
        }
    }
}

Logger.cs
----------

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using log4net;

namespace BankingProject
{
    public static class Logger
    {
        public static readonly ILog log = LogManager.GetLogger(typeof(Logger));
    }
}

LoginPageWindow.xaml
--------------------

﻿<Window x:Class="BankingProject.LoginPageWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankingProject"
        mc:Ignorable="d"
        Title="LoginPageWindow" Height="450" Width="800" Closed="Window_Closed">
    <Grid >
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <DockPanel LastChildFill="True">
            <TextBlock Text="User Login" DockPanel.Dock="Top" TextAlignment="Center" Margin="0 0 0 370" FontSize="36" FontFamily="Georgia" Background="ForestGreen"/>
        </DockPanel>
        <Border Grid.Column="0"  Background="AliceBlue" Width="300" Height="300" CornerRadius="5">
            <StackPanel Orientation="Vertical" VerticalAlignment="Center">
                <StackPanel Orientation="Vertical" Margin="10 10 10 0">
                    <TextBlock  Text="Username" FontWeight="bold" Margin="10 10 10 5" FontSize="10"/>
                    <TextBox x:Name="txtUsername" Margin="10 0 10 10" Height="30" Padding="4 4 4 4" />
                </StackPanel>

                <StackPanel Orientation="Vertical" Margin="10 0 10 10">
                    <TextBlock Text="Password" FontWeight="bold" Margin="10 10 10 5" FontSize="10"/>
                    <PasswordBox x:Name="txtPassword" Margin="10 0 10 10" Height="30" Padding="4 4 4 4" />

                </StackPanel>

                <Button Width="200" Content="Login" Height="30" Background="ForestGreen" Foreground="white" FontWeight="Bold" FontSize="10" Margin="10 10 10 10" Click="Button_Click"/>
            </StackPanel>

        </Border>
    </Grid>
</Window>

LoginPageWindow.xaml.cs
------------------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankingProject
{
    /// <summary>
    /// Interaction logic for LoginPageWindow.xaml
    /// </summary>
    public partial class LoginPageWindow : Window
    {
        public LoginPageWindow()
        {
            InitializeComponent();

        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            if (txtUsername.Text == "Dijol" && txtPassword.Password == "2001")
            {
                AccountConfig.dashBoardWindow.Show();
                this.Hide();
            }
            else
            {
                MessageBox.Show(messageBoxText: $"Invalid username or password",
                   caption: "Warning",
                   button: MessageBoxButton.OK,
                   icon: MessageBoxImage.Warning);
                return;
            }
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            Application.Current.Shutdown();
        }
    }
}

RelayCommand.cs
--------------

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;

namespace BankingProject
{

    /// <summary>
    /// Represents a command that can be executed.
    /// </summary>
    public class RelayCommand : ICommand
    {
        /// <summary>
        /// The action to execute when the command is invoked.
        /// </summary>
        private readonly Action _execute;

        /// <summary>
        /// A function that determines whether the command can be executed.
        /// </summary>
        private readonly Func<bool> _canExecute;

        /// <summary>
        /// Initializes a new instance of the RelayCommand class.
        /// </summary>
        /// <param name="execute">The action to execute when the command is invoked.</param>
        /// <param name="canExecute">A function that determines whether the command can be executed.</param>
        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        /// <summary>
        /// Occurs when the CanExecute method of the command changes.
        /// </summary>
        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }

        /// <summary>
        /// Determines whether the command can be executed.
        /// </summary>
        /// <param name="parameter">The parameter to pass to the CanExecute method.</param>
        /// <returns>True if the command can be executed; otherwise, false.</returns>
        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute();
        }

        /// <summary>
        /// Executes the command.
        /// </summary>
        /// <param name="parameter">The parameter to pass to the Execute method.</param>
        public void Execute(object parameter)
        {
            _execute();
        }
    }
}

WithdrawViewModel.cs
----------------

﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows;
using log4net.Repository.Hierarchy;

namespace BankingProject
{
    /// <summary>
    /// Represents a view model for withdrawing money from an account.
    /// </summary>
    public class WithdrawViewModel : INotifyPropertyChanged
    {
        public DWidnowClose NewWindowClose;
        public DWidnowClose EditWindowClose;


        public event PropertyChangedEventHandler PropertyChanged;
        private void OnPropertyChanged(string propName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propName));
        }

        /// <summary>
        /// Gets or sets the account number.
        /// </summary>
        private int _accountNumber;
        public int AccountNumber
        {
            get { return _accountNumber; }
            set
            {
                _accountNumber = value;
                OnPropertyChanged(nameof(AccountNumber));
            }

        }
        /// <summary>
        /// Gets or sets the amount to withdraw.
        /// </summary>

        private int _amount;

        public int Amount
        {
            get { return _amount; }
            set
            {
                _amount = value;
                OnPropertyChanged(nameof(Amount));
            }
        }

        /// <summary>
        /// Gets the accounts repository.
        /// </summary>

        private IAccountRepo _repo = AccountMemoryRepo.Instance;

        /// <summary>
        /// Gets the command for withdrawing money from an account.
        /// </summary>

        public ICommand WithdrawCommand { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="WithdrawViewModel"/> class.
        /// </summary>
        public WithdrawViewModel()
        {
            WithdrawCommand = new RelayCommand(Withdraw);
        }

        /// <summary>
        /// Withdraws money from an account.
        /// </summary>
        /// <exception cref="AccountException">Thrown if the account does not exist or if the balance is insufficient.</exception>
        public void Withdraw()
        {
            var result = MessageBox.Show(messageBoxText: "Are you sure to Withdraw?",
                    caption: "Confirm",
                    button: MessageBoxButton.YesNo,
                    icon: MessageBoxImage.Question);
            if (result != MessageBoxResult.Yes)
            {
                return;
            }
            try
            {
                _repo.Withdrw(AccountNumber, Amount);
                MessageBox.Show(messageBoxText: $"Withdrawed Successfully from account {AccountNumber}",
                        caption: "Alert",
                        button: MessageBoxButton.OK,
                        icon: MessageBoxImage.Information);
                Logger.log.Info($"Withdrawed {Amount} rupees Successfully from account {AccountNumber}");
                this.AccountNumber = 0;
                this.Amount = 0;
            }
            catch (AccountException ae)
            {
                MessageBox.Show(messageBoxText: $"{ae.Message}",
                   caption: "Warning",
                   button: MessageBoxButton.OK,
                   icon: MessageBoxImage.Warning);

                Logger.log.Error(ae.Message);
            }
            catch (Exception ex)
            {
                Logger.log.Error(ex.Message);
            }
        }
    }
}
   

WithdrawWindow.xaml
--------------

﻿<Window x:Class="BankingProject.WithdrawWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankingProject"
        mc:Ignorable="d"
        Title="WithdrawWindow" Height="450" Width="800">
    <Grid MaxWidth="1200">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Border Grid.Row="0" Background="AliceBlue" HorizontalAlignment="Center" VerticalAlignment="Center"
            CornerRadius="5">
            <StackPanel Margin="30">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Account Number" VerticalAlignment="Center" Width="200" FontWeight="bold"
                       FontSize="14"/>
                    <TextBox Width="300" Height="30" Margin="10 0 0 0" Text="{Binding AccountNumber}"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal" Margin="0 10 0 0">
                    <TextBlock Text="Amount" VerticalAlignment="Center" Width="200" FontWeight="bold"
       FontSize="14"/>
                    <TextBox Width="300" Height="30" Margin="10 10 0 0" Text="{Binding Amount}"/>
                </StackPanel>

                <Button Content="Withdraw" Background="Green" Foreground="white" FontWeight="bold"
                    Width="250" Height="50" Margin="0 20 0 0"
                        Command="{Binding WithdrawCommand}"/>
            </StackPanel>
        </Border>
    </Grid>
</Window>

WithdrawWindow.xaml.cs
-------------------
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankingProject
{
    /// <summary>
    /// Interaction logic for WithdrawWindow.xaml
    /// </summary>
    public partial class WithdrawWindow : Window
    {
        public WithdrawWindow()
        {
            InitializeComponent();
            this.DataContext = AccountConfig.withdrawViewModel;
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}

packages.config
--------------


﻿<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="log4net" version="3.0.1" targetFramework="net472" />
  <package id="Microsoft.NETFramework.ReferenceAssemblies" version="1.0.2" targetFramework="net472" developmentDependency="true" />
  <package id="Microsoft.NETFramework.ReferenceAssemblies.net472" version="1.0.2" targetFramework="net472" developmentDependency="true" />
  <package id="OxyPlot.Core" version="2.2.0" targetFramework="net472" />
  <package id="OxyPlot.Wpf" version="2.2.0" targetFramework="net472" />
  <package id="OxyPlot.Wpf.Shared" version="2.2.0" targetFramework="net472" />
</packages>


